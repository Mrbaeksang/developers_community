name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # 자동 포맷팅 및 수정 (PR에서만)
  auto-fix:
    name: Auto Fix Code
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Auto fix all issues
        run: |
          echo "🔧 자동 수정 시작..."
          npm run lint:fix || true
          npm run format || true
          echo "✅ 자동 수정 완료!"

      - name: Check if there are changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "🤖 자동 코드 포맷팅 및 린트 수정"
          git push

  # 코드 품질 검사 (자동 수정 후)
  quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: [auto-fix]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier Check
        run: npm run format:check

      - name: Run TypeScript Check
        run: npm run type-check

  # 빌드 및 테스트
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: quality
    if: always() && (needs.quality.result == 'success' || needs.quality.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-for-ci
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379

  # CI 상태 리포트
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality, build]
    if: always()

    steps:
      - name: Report status
        run: |
          if [ "${{ needs.quality.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ CI 성공! 모든 검사를 통과했습니다."
          else
            echo "❌ CI 실패! 코드를 확인해주세요."
            exit 1
          fi
